package com.launchdarkly.client;

import com.google.common.collect.ImmutableMap;
import com.google.gson.Gson;
import com.google.gson.JsonElement;

import java.util.HashMap;
import java.util.Map;

/**
 * A snapshot of the state of all feature flags with regard to a specific user, generated by
 * calling {@link LDClientInterface#allFlagsState(LDUser)}.
 * 
 * @since 4.3.0
 */
public class FeatureFlagsState {
  private static final Gson gson = new Gson();
  
  private final ImmutableMap<String, JsonElement> flagValues;
  private final ImmutableMap<String, FlagMetadata> flagMetadata;
  private final boolean valid;
    
  static class FlagMetadata {
    final Integer variation;
    final EvaluationReason reason;
    final int version;
    final boolean trackEvents;
    final Long debugEventsUntilDate;
    
    FlagMetadata(Integer variation, EvaluationReason reason, int version, boolean trackEvents,
        Long debugEventsUntilDate) {
      this.variation = variation;
      this.reason = reason;
      this.version = version;
      this.trackEvents = trackEvents;
      this.debugEventsUntilDate = debugEventsUntilDate;
    }
  }
  
  private FeatureFlagsState(Builder builder) {
    this.flagValues = builder.flagValues.build();
    this.flagMetadata = builder.flagMetadata.build();
    this.valid = builder.valid;
  }
  
  /**
   * Returns true if this object contains a valid snapshot of feature flag state, or false if the
   * state could not be computed (for instance, because the client was offline or there was no user).
   * @return true if the state is valid
   */
  public boolean isValid() {
    return valid;
  }
  
  /**
   * Returns the value of an individual feature flag at the time the state was recorded.
   * @param key the feature flag key
   * @return the flag's JSON value; null if the flag returned the default value, or if there was no such flag
   */
  public JsonElement getFlagValue(String key) {
    return flagValues.get(key);
  }

  /**
   * Returns the evaluation reason for an individual feature flag at the time the state was recorded.
   * @param key the feature flag key
   * @return an {@link EvaluationReason}; null if reasons were not recorded, or if there was no such flag
   */
  public EvaluationReason getFlagReason(String key) {
    FlagMetadata data = flagMetadata.get(key);
    return data == null ? null : data.reason;
  }
  
  /**
   * Returns a map of flag keys to flag values. If a flag would have evaluated to the default value,
   * its value will be null.
   * @return an immutable map of flag keys to JSON values
   */
  public Map<String, JsonElement> toValuesMap() {
    return flagValues;
  }
  
  /**
   * Returns a JSON string representation of the entire state map, in the format used by the
   * LaunchDarkly JavaScript SDK. Use this method if you are passing data to the front end that
   * will be used to "bootstrap" the JavaScript client.
   * @return a JSON representation of the state object
   */
  public String toJsonString() {
    Map<String, Object> outerMap = new HashMap<>();
    outerMap.putAll(flagValues);
    outerMap.put("$flagsState", flagMetadata);
    return gson.toJson(outerMap);
  }
  
  static class Builder {
    private final ImmutableMap.Builder<String, JsonElement> flagValues = ImmutableMap.builder();
    private final ImmutableMap.Builder<String, FlagMetadata> flagMetadata = ImmutableMap.builder();
    private final boolean saveReasons;
    private boolean valid = true;

    Builder(FlagsStateOption... options) {
      saveReasons = FlagsStateOption.isWithReasons(options);
    }
    
    Builder valid(boolean valid) {
      this.valid = valid;
      return this;
    }
    
    Builder addFlag(FeatureFlag flag, EvaluationDetail<JsonElement> eval) {
      flagValues.put(flag.getKey(), eval.getValue());
      FlagMetadata data = new FlagMetadata(eval.getVariationIndex(),
          saveReasons ? eval.getReason() : null,
          flag.getVersion(), flag.isTrackEvents(), flag.getDebugEventsUntilDate());
      flagMetadata.put(flag.getKey(), data);
      return this;
    }
    
    FeatureFlagsState build() {
      return new FeatureFlagsState(this);
    }
  }
}
